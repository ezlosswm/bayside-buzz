package dashboard

import (
	"bayside-buzz/cmd/web/components"
	"bayside-buzz/cmd/web/layouts"
	"bayside-buzz/internal/database"
	"bayside-buzz/internal/domain"
	"strings"
)

templ CreateEvent(pageData *domain.PageData, created bool, organizers []database.Organizer) {
	@layouts.DashboardLayout(pageData) {
		<div class="mt-16 sm:mt-0 w-full max-w-3xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
			<div hx-swap-oob="true" id="success-message" class="mb-4">
				if created {
					<div class="p-4 mt-4 text-sm rounded-lg bg-blue-50 text-blue-600">
						New event created.
					</div>
				}
			</div>
			<form
				enctype="multipart/form-data"
				hx-post="/dashboard/events"
				hx-target="#success-message"
				hx-swap="innerHTML"
				class="bg-white shadow-xs ring-1 ring-gray-900/5 sm:rounded-xl md:col-span-2"
			>
				<div class="px-4 py-6 sm:p-8">
					<div class="max-w-3xl">
						<h2 class="text-base font-semibold leading-7 text-gray-900">
							Create New Event
						</h2>
						<p class="mt-1 text-sm leading-6 text-gray-600">
							Fill in the details below to create a new event.
						</p>
						<div class="mt-10 space-y-8">
							<div class="sm:col-span-4">
								<label
									for="event__title"
									class="block text-sm font-medium leading-6 text-gray-900"
								>
									Event Title
								</label>
								<div class="mt-2">
									@components.Input(components.InputValues{
										Type:        "text",
										Name:        "event__title",
										Placeholder: "Event event title.",
									})
								</div>
							</div>
							<div class="col-span-full">
								<label
									for="event__description"
									class="block text-sm font-medium leading-6 text-gray-900"
								>
									Description
								</label>
								<div class="mt-2">
									@components.TextArea(components.InputValues{
										Name:        "event__description",
										Rows:        "3",
										MaxLength:   "200",
										Placeholder: "Write a description for your event.",
									})
								</div>
							</div>
							<div class="col-span-full">
								<label class="block text-sm font-medium leading-6 text-gray-900">Event Tags</label>
								<div class="mt-2 flex flex-wrap gap-4">
									for _, filter := range Filters {
										@components.Checkbox(components.InputValues{
											Type:  "checkbox",
											Name:  "event__tags[]",
											Value: filter.Label,
										}, strings.Join([]string{"tag", filter.Label}, "-"))
										// <div class="flex items-center">
										// 	<input
										// 		type="checkbox"
										// 		name="event__tags[]"
										// 		value={ filter.Label }
										// 		id={ "tag-" + filter.Label }
										// 		class="h-4 w-4 rounded-sm border-gray-300 text-gray-600 focus:ring-gray-600"
										// 	/>
										// 	<label for={ "tag-" + filter.Label } class="ml-2 text-sm text-gray-900">
										// 		{ filter.Label }
										// 	</label>
										// </div>
									}
								</div>
							</div>
							<div class="sm:grid-cols-2">
								<label
									for="event__date"
									class="block text-sm font-medium leading-6 text-gray-900"
								>
									Start Date
								</label>
								<div class="mt-2">
									@components.Input(components.InputValues{
										Type: "date",
										Name: "event__date",
									})
								</div>
							</div>
							<div class="col-span-2">
								<label
									for="event__frequency"
									class="block text-sm font-medium leading-6 text-gray-900"
								>
									Frequency
								</label>
								<select
									name="event__frequency"
									class="mt-2 w-full text-sm rounded-md border-0 ring-1 ring-inset ring-gray-300  focus:ring-2 focus:ring-inset focus:ring-blue-500 sm:leading-6"
								>
									<option value="once">Once</option>
									<option value="weekly">Weekly</option>
									<option value="monthly">Monthly</option>
									<option value="annual">Annual</option>
								</select>
							</div>
							<div class="col-span-full">
								<label
									for="cover__img"
									class="block text-sm font-medium leading-6 text-gray-900"
								>
									Cover Image
								</label>
								<div class="mt-2 flex items-center gap-x-3">
									<div
										class="size-12 flex items-center justify-center rounded-lg bg-gray-100"
									>
										<svg
											class="size-6 text-gray-400"
											fill="none"
											stroke="currentColor"
											viewBox="0 0 24 24"
										>
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
											></path>
										</svg>
									</div>
									<input
										aria-describedby="image upload"
										type="file"
										name="cover__img"
										accept="image/*"
										class="cursor-pointer block w-full text-sm md:text-base text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-sky-50 file:text-sky-700 hover:file:bg-sky-100"
										required
									/>
								</div>
							</div>
							<div class="col-span-full">
								<label
									for="event__organizer"
									class="block text-sm font-medium leading-6 text-gray-900 flex-1"
								>
									Select Organizer
								</label>
								<select
									name="event__organizer"
									class="mt-2 w-full text-sm rounded-lg border-gray-300"
								>
									@organizerSelect(organizers)
								</select>
							</div>
						</div>
					</div>
				</div>
				<div
					class="flex items-center justify-end gap-x-4 border-t border-gray-900/10 px-4 py-4 sm:px-8"
				>
					@components.Button("isClean", false) {
						Cancel
					}
					@components.Button("isPrimary", false) {
						Create Event
					}
				</div>
			</form>
		</div>
	}
}

templ organizerSelect(organizers []database.Organizer) {
	<option value="">Please select</option>
	for _, o := range organizers {
		<option value={ o.OrganizerName }>{ o.OrganizerName }</option>
	}
}
