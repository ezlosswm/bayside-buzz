// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tags.sql

package database

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (name)
VALUES ($1)
ON CONFLICT (name) DO NOTHING
RETURNING id, name
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findTagByName = `-- name: FindTagByName :one
SELECT id, name
FROM tags
WHERE name = $1
`

func (q *Queries) FindTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, findTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagsForEvent = `-- name: GetTagsForEvent :many
SELECT tags.id, tags.name
FROM tags
JOIN event_tags ON tags.id = event_tags.tagId
WHERE event_tags.eventId = $1
`

func (q *Queries) GetTagsForEvent(ctx context.Context, eventid int32) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsForEvent, eventid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkEventToTag = `-- name: LinkEventToTag :exec
INSERT INTO event_tags (eventId, tagId)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type LinkEventToTagParams struct {
	Eventid int32
	Tagid   int32
}

func (q *Queries) LinkEventToTag(ctx context.Context, arg LinkEventToTagParams) error {
	_, err := q.db.Exec(ctx, linkEventToTag, arg.Eventid, arg.Tagid)
	return err
}
