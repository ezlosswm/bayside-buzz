// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizers.sql

package database

import (
	"context"
)

const countOrganizers = `-- name: CountOrganizers :one
SELECT COUNT(*) FROM organizers
`

func (q *Queries) CountOrganizers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOrganizers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrganizer = `-- name: CreateOrganizer :exec
INSERT INTO organizers (
    organizer_name, description, img_url
    ) VALUES (
    $1, $2, $3
)
`

type CreateOrganizerParams struct {
	OrganizerName string
	Description   string
	ImgUrl        string
}

func (q *Queries) CreateOrganizer(ctx context.Context, arg CreateOrganizerParams) error {
	_, err := q.db.Exec(ctx, createOrganizer, arg.OrganizerName, arg.Description, arg.ImgUrl)
	return err
}

const deleteOrganizer = `-- name: DeleteOrganizer :exec
DELETE FROM organizers
WHERE id = $1
`

func (q *Queries) DeleteOrganizer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrganizer, id)
	return err
}

const getOrganizer = `-- name: GetOrganizer :one
SELECT id, organizer_name, description, img_url FROM organizers WHERE id = $1
`

func (q *Queries) GetOrganizer(ctx context.Context, id int32) (Organizer, error) {
	row := q.db.QueryRow(ctx, getOrganizer, id)
	var i Organizer
	err := row.Scan(
		&i.ID,
		&i.OrganizerName,
		&i.Description,
		&i.ImgUrl,
	)
	return i, err
}

const getOrganizers = `-- name: GetOrganizers :many
SELECT id, organizer_name, description, img_url FROM organizers
`

func (q *Queries) GetOrganizers(ctx context.Context) ([]Organizer, error) {
	rows, err := q.db.Query(ctx, getOrganizers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organizer
	for rows.Next() {
		var i Organizer
		if err := rows.Scan(
			&i.ID,
			&i.OrganizerName,
			&i.Description,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganizer = `-- name: UpdateOrganizer :exec
UPDATE organizers 
SET 
    organizer_name = $1, 
    description = $2,
    img_url = $3
WHERE 
    id = $4
`

type UpdateOrganizerParams struct {
	OrganizerName string
	Description   string
	ImgUrl        string
	ID            int32
}

func (q *Queries) UpdateOrganizer(ctx context.Context, arg UpdateOrganizerParams) error {
	_, err := q.db.Exec(ctx, updateOrganizer,
		arg.OrganizerName,
		arg.Description,
		arg.ImgUrl,
		arg.ID,
	)
	return err
}
